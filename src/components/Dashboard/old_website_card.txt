<template>
  <div class="bg-[#1f2937] rounded-lg p-5 shadow-lg relative">
    <!-- Top Row: Status Dot + Website Title + Action Buttons -->
    <div class="flex justify-between items-center mb-3">
      <div class="flex items-center gap-2">
        <!-- Status Dot -->
        <span
          :class="statusClass(website.status)"
          class="w-3 h-3 rounded-full"
        ></span>
        <h3 class="text-md font-semibold text-white">{{ website.name }}</h3>
      </div>

      <!-- Action Buttons -->
      <div class="flex items-center gap-2 text-gray-400">
        <button
          class="hover:text-white transition"
          @click="emitRefresh"
          title="Refresh"
        >
          üîÑ
        </button>
        <button
          class="hover:text-white transition"
          @click="emitDetails"
          title="View Details"
        >
          üëÅÔ∏è
        </button>
        <button
          class="hover:text-white transition"
          @click="emitRemove"
          title="Delete"
        >
          üóëÔ∏è
        </button>
      </div>
    </div>

    <!-- Website URL -->
    <p class="text-blue-400 text-sm mb-4">{{ website.url }}</p>

    <!-- Metrics -->
    <div class="grid grid-cols-2 gap-3 mb-4">
      <div class="bg-gray-700 rounded-md p-3 text-center">
        <p class="text-gray-400 text-xs">Total Requests</p>
        <p class="text-lg font-bold text-white">{{ formatNumber(website.metrics.totalRequests) }}</p>
      </div>
      <div class="bg-gray-700 rounded-md p-3 text-center">
        <p class="text-gray-400 text-xs">Blocked Attacks</p>
        <p class="text-lg font-bold text-red-400">{{ formatNumber(website.metrics.blockedAttacks) }}</p>
      </div>
      <div class="bg-gray-700 rounded-md p-3 text-center">
        <p class="text-gray-400 text-xs">Uptime</p>
        <p class="text-lg font-bold text-green-400">{{ website.metrics.uptime }}%</p>
      </div>
      <div class="bg-gray-700 rounded-md p-3 text-center">
        <p class="text-gray-400 text-xs">Response Time</p>
        <p class="text-lg font-bold text-blue-400">{{ website.metrics.responseTime }}ms</p>
      </div>
    </div>

    <!-- Security Protections -->
    <h4 class="text-gray-300 font-medium mb-2">Security Protections</h4>
    <div class="space-y-2">
      <div
        v-for="(protection, index) in protections"
        :key="index"
        class="flex items-center justify-between"
      >
        <span class="text-gray-400 text-sm">{{ protection.name }}</span>
        <ToggleSwitch
          :modelValue="protection.state"
          @attemptToggle="() => onAttemptToggle(index)"
        />
      </div>
    </div>

    <!-- Last Checked -->
    <p class="text-gray-500 text-xs mt-4">
      Last checked: {{ formatDate(website.lastChecked) }}
    </p>

    <!-- Popup Modal -->
    <CodeModal
      v-if="showModal"
      :code="popupCode"
      @confirm="confirmToggle"
      @cancel="cancelToggle"
      @close="cancelToggle"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, toRefs } from "vue";
import ToggleSwitch from "../UI/ToggleSwitch.vue";
import CodeModal from "../UI/CodeModal.vue";

// Props
const props = defineProps<{ website: any }>();
const { website } = toRefs(props);

// Emits
const emit = defineEmits<{
  (e: 'refresh', websiteId: string): void;
  (e: 'details', website: any): void;
  (e: 'remove', websiteId: string): void;
}>();

// Local State
const protections = ref([
  { name: "SQL Injection Protection", state: false },
  { name: "XSS Protection", state: false },
  { name: "Defacement Protection", state: false },
]);

const showModal = ref(false);
const targetToggleIndex = ref<number | null>(null);
const popupCode = `console.log('Your unique security code here!');`;

// Button Emitters
function emitRefresh() {
  emit('refresh', website.value.id); // ‚úÖ Use website.value
}
function emitDetails() {
  emit('details', website.value); // ‚úÖ Use website.value
}
function emitRemove() {
  emit('remove', website.value.id); // ‚úÖ Use website.value
}

// Existing Methods
function statusClass(status: string) {
  return status === 'online'
    ? 'bg-green-400'
    : status === 'warning'
    ? 'bg-yellow-400'
    : 'bg-red-500';
}

function formatNumber(num: number) {
  return num.toLocaleString();
}

function formatDate(date: string) {
  const d = new Date(date);
  return d.toLocaleString();
}

function onAttemptToggle(index: number) {
  targetToggleIndex.value = index;
  showModal.value = true;
}

function confirmToggle() {
  if (targetToggleIndex.value !== null) {
    protections.value[targetToggleIndex.value].state = true;
  }
  closeModal();
}

function cancelToggle() {
  if (targetToggleIndex.value !== null) {
    protections.value[targetToggleIndex.value].state = false;
  }
  closeModal();
}

function closeModal() {
  showModal.value = false;
  targetToggleIndex.value = null;
}
</script>